<div>
  <p><a href="/users/">Users Test</a></p>
  <p class="display_text">Data Series</p>
  <div class="itemdisplay">
    <div class="itembox">
      <p id="visual-object-info"></p>
    </div>
  </div>
  <div class="scatter_display">
    <button class="refresh">Update Data</button>
  </div>
</div>

<script type="text/javascript">

// --------- ITEM FORCE PLOT --------
// description display on mouseover
var nodeMouseOver = function() {
  var itemNode = d3.select(this);
  d3.select(".itembox")
    .style("display", "block");
  d3.select("#visual-object-info")
    .text("" + this.__data__.item + " has " + this.__data__.val + " votes, with " + Math.round(((this.__data__.pos) / (this.__data__.val)) * 100) + "% positive.");
}
// description display removed
var nodeMouseOut = function() {
  var itemNode = d3.select(this);
  d3.select(".itembox").style("display", "none");
}
// raw data
// var rawEdges = <%= raw @visedges %>
// data manipulation
// rawEdges.forEach(function(d){
//   d.source = +d.source;
//   d.target = +d.target;
// });
// dataset for visual
var itemDataSet = {
  nodes: [
          {name: "test_a", val: 7, pos: 7},
          {name: "test_b", val: 4, pos: 3},
          {name: "test_c", val: 1, pos: 1},
          {name: "test_d", val: 8, pos: 5},
          {name: "test_e", val: 9, pos: 9},
          {name: "test_f", val: 7, pos: 7},
          {name: "test_g", val: 6, pos: 3},
          {name: "test_h", val: 5, pos: 3},
          {name: "test_i", val: 4, pos: 3},
          {name: "test_j", val: 2, pos: 3},
          {name: "test_k", val: 2, pos: 1},
          {name: "test_l", val: 4, pos: 4}
  ],
  edges: [
          {source: 0, target: 1},
          {source: 2, target: 6},
          {source: 2, target: 4},
          {source: 2, target: 3},
          {source: 4, target: 8},
          {source: 3, target: 9},
          {source: 6, target: 11},
          {source: 6, target: 10},
          {source: 4, target: 5},
          {source: 3, target: 7},
          {source: 3, target: 8},
          {source: 0, target: 9},
          {source: 1, target: 9},
          {source: 2, target: 7},
          {source: 2, target: 8},
          {source: 2, target: 9},
          {source: 4, target: 8},
          {source: 4, target: 10},
          {source: 6, target: 7},
          {source: 6, target: 8},
          {source: 4, target: 10},
          {source: 3, target: 10},
          {source: 3, target: 11},
          {source: 0, target: 10},
          {source: 1, target: 4},
          {source: 1, target: 9}
  ]
};
// canvas size
var itemWidth = 620
var itemHeight = 600
// color design

var itemColor = d3.scale.category20b();
// create canvas
var itemSvg = d3.select(".itemdisplay").append("svg")
    .attr("width", itemWidth)
    .attr("height", itemHeight);
// create force layout
var itemForce = d3.layout
                  .force()
                  .nodes(itemDataSet.nodes)
                  .links(itemDataSet.edges)
                  .size([itemWidth, itemHeight])
                  .linkDistance([80])
                  .charge([-1000])
                  .start();
// define edges
var itemEdges = itemSvg.selectAll("line")
                .data(itemDataSet.edges)
                .enter()
                .append("line")
                .style("stroke", "#00ff00")
                .style("stroke-width", 1);
// define nodes
var itemNodes = itemSvg.selectAll("circle")
                .data(itemDataSet.nodes)
                .enter()
                .append("circle")
                .attr("r", function(d){ return d.val * 4;})
                .on("mouseover", nodeMouseOver)
                .on("mouseout", nodeMouseOut)
                .style("fill", function(d) { return itemColor((d.pos / d.val) * 100); })
                .text(function(d) {return d.item})
                .call(itemForce.drag);
// connect nodes with edges
itemForce.on("tick", function() {

  itemEdges.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

  itemNodes.attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
});

// ------ SCATTER PLOT ---------

var dataset = [[5, 20], [480, 90], [250, 50], [100, 33], [330, 95], [410, 12], [475, 44], [25, 67], [85, 12], [220, 90], [600, 150], [70, 200], [40, 92], [25, 110], [10, 330], [33, 395], [450, 120], [45, 444], [225, 67], [331, 12], [22, 290], [60, 15], [50, 20], [400, 400], [350, 150], [120, 333], [133, 195], [410, 112], [275, 244], [256, 267], [385, 312], [220, 290], [600, 350], [170, 200], [240, 192], [225, 110], [110, 330], [133, 395], [450, 120], [45, 444], [225, 67], [331, 12], [22, 290], [60, 15]];

d3.select(".refresh").on("click", function(){

  dataset = [[5, 200], [440, 90], [250, 250], [100, 33], [330, 95], [500, 400], [45, 44], [25, 67], [75, 120], [290, 90], [60, 150], [70, 290], [540, 92], [25, 10], [10, 330], [33, 350], [40, 120], [45, 444], [225, 67], [31, 126], [22, 320], [60, 215], [150, 20], [400, 300], [350, 250], [120, 33], [233, 95], [110, 212], [75, 4], [26, 207], [315, 112], [120, 90], [60, 250], [570, 220], [40, 92], [22, 110], [110, 330], [133, 395], [50, 120], [45, 44], [22, 267], [31, 312], [322, 290], [40, 195]];

// ------ TRANSITION ---------

svg.selectAll("circle").data(dataset).transition().duration(2000).ease("linear").attr("cx", function(d) {
  return xScale(d[0]);
}).attr("cy", function(d) {
  return yScale(d[1]);
}).attr("r", function(d) {
  return rScale(d[1]);
}).attr("fill", "purple").attr("stroke", "white").attr("stroke-width", 1);
})
// var numValues = dataset.length;
// dataset = [];
// for (var i = 0; i < numValues; i++ ) {
//  var newNumber = Math.floor(Math.random() * 600);
//  dataset.push(newNumber);
// }

var w = 750;
var h = 500;
var padding = 30;

var xScale = d3.scale.linear().domain([0, d3.max(dataset, function(d){
  return d[0];
})]).range([padding, w - padding]);

var yScale = d3.scale.linear().domain([0, d3.max(dataset, function(d){
  return d[1];
})]).range([h - padding, padding]);

var rScale = d3.scale.linear().domain([0, d3.max(dataset, function(d){
  return d[1];
})]).range([2, 10]);

var xAxis = d3.svg.axis().scale(xScale).orient("bottom");
var yAxis = d3.svg.axis().scale(yScale).orient("left");

var svg = d3.select(".scatter_display").append("svg").attr("width", w).attr("height", h);

svg.selectAll("circle").data(dataset).enter().append("circle").attr("cx", function(d) {
  return xScale(d[0]);
}).attr("cy", function(d) {
  return yScale(d[1]);
}).attr("r", function(d) {
  return rScale(d[1]);
}).attr("fill", "lightblue").attr("stroke", "blue").attr("stroke-width", 1);

svg.append("g").attr("class", "axis").attr("transform", "translate(0," + (h - padding) + ")").call(xAxis);
svg.append("g").attr("class", "axis").attr("transform", "translate(" + padding + ",0)").call(yAxis);


</script>